import numpy as np
from scipy.optimize import  minimize

Def func(x1, x2, sign=1.0) :
    
    %angular
        n = 14052*x1 + 85439;
        e = -240063*x1 + 1e6;
        
        % % linear
        n = 39417*(x2/1) + 569365;
        e = 530.27*(x2/1) + 2e6;
        
        if  x1==0:
            n= n2;
                e=e2;
        elif x2==0:
            n=n1;
                e=e1;
                    else:
                        n = .6*n1 + .4*n2;
                            e= .48e1 + .52e2;
                                b = (((46800)/5.5125)*((x1/.5)+(x2/2))*100)/(46800)
                                    if e>1.6e6:
                                        %linear
                                            o = round(848.8 - (0.003918*n) + (e*3.661e-5) +	((n.^2)*6.052e-9) + (n*e*(-1.172e-10)) + ((-3.11e-15)*(n.^3)) + ((n.^2)*e*(9.368e-17)),0)
                                                else:
                                                    %angular
                                                        o = round((n*e*(-1.549e-12) + ((n.^2)*(1.651e-9)) + (e*(-7.559e-7)) - (0.000425*n) +29.55),0);
                                                            f = -1 * (o + .08*b)
                                                                return f
Def re(x1, x2) :
    
    %angular
        n = 14052*x1 + 85439;
        e = -240063*x1 + 1e6;
        
        % % linear
        n = 39417*(x2/1) + 569365;
        e = 530.27*(x2/1) + 2e6;
        
        if  x1==0:
            n= n2;
                e=e2;
        elif x2==0:
            n=n1;
                e=e1;
                    else:
                        n = .6*n1 + .4*n2;
                            e= .48e1 + .52e2;
                                if e>1.6e6:
                                    %linear
                                        o = round(848.8 - (0.003918*n) + (e*3.661e-5) +	((n.^2)*6.052e-9) + (n*e*(-1.172e-10)) + ((-3.11e-15)*(n.^3)) + ((n.^2)*e*(9.368e-17)),0)
                                            else:
                                                %angular
                                                    o = round((n*e*(-1.549e-12) + ((n.^2)*(1.651e-9)) + (e*(-7.559e-7)) - (0.000425*n) +29.55),0);
                                                        return o

def func_deriv1(x1,x2):
    d	%angular
        n1 = 14052*x1 + 85439;
        e1 = -240063*x1 + 1e6;
        
        % % linear
        n2 = 39417*(x2/1) + 569365;
        e2 = 530.27*(x2/1) + 2e6;
        
        if  x1==0:
            n= n2;
                e=e2;
        elif x2==0:
            n=n1;
                e=e1;
                    else:
                        n = .6*n1 + .4*n2;
                            e= .48e1 + .52e2;
                                b = (((46800)/5.5125)*((x1/.5)+(x2/2))*100)/(46800)
                                    if e>1.6e6:
                                        %linear
                                            dfdx0 =  (0.003918*14052) + (-240063*3.661e-5) +	((2*n)*6.052e-9) + (14052*(-240063)*(-1.172e-10)) + ((-3.11e-15)*3*(n.^2)) + (2*(n)*(-240063)*(9.368e-17)),0)
                                                dfdx1 = 0.003918*39417) + (530.27*3.661e-5) +	((2*n)*6.052e-9) + (39417*(530.27)*(-1.172e-10)) + ((-3.11e-15)*3*(n.^2)) + (2*(n)*(530.27)*(9.368e-17)),0)
                                                    else:
                                                        %angular
                                                            dfdx0 = round((14052*-240063*(-1.549e-12) + (2*(n)*(1.651e-9)) + (-240063*(-7.559e-7)) - (0.000425* 14052) ),0)
                                                                dfdx1 = round((39417* 530.27*(-1.549e-12) + (2*(n)*(1.651e-9)) + (530.27*(-7.559e-7)) - (0.000425* 39417) ),0)
                                                                    
                                                                    return np.array()[dfdx0 dfdx1]

def func_deriv(x1,x2):
    d	%angular
        n1 = 14052*x1 + 85439;
        e1 = -240063*x1 + 1e6;
        
        % % linear
        n2 = 39417*(x2/1) + 569365;
        e2 = 530.27*(x2/1) + 2e6;
        
        if  x1==0:
            n= n2;
                e=e2;
        elif x2==0:
            n=n1;
                e=e1;
                    else:
                        n = .6*n1 + .4*n2;
                            e= .48e1 + .52e2;
                                dfdx01 = (((46800)/5.5125)*((1/.5))*100)/(46800)
                                    dfdx11 = (((46800)/5.5125)*((1/2))*100)/(46800)
                                        if e>1.6e6:
                                            %linear
                                                dfdx00 =  (0.003918*14052) + (-240063*3.661e-5) +	((2*n)*6.052e-9) + (14052*(-240063)*(-1.172e-10)) + ((-3.11e-15)*3*(n.^2)) + (2*(n)*(-240063)*(9.368e-17)),0)
                                                    dfdx01 = 0.003918*39417) + (530.27*3.661e-5) +	((2*n)*6.052e-9) + (39417*(530.27)*(-1.172e-10)) + ((-3.11e-15)*3*(n.^2)) + (2*(n)*(530.27)*(9.368e-17)),0)
                                                        else:
                                                            %angular
                                                                dfdx00 = round((14052*-240063*(-1.549e-12) + (2*(n)*(1.651e-9)) + (-240063*(-7.559e-7)) - (0.000425* 14052) ),0)
                                                                    dfdx10 = round((39417* 530.27*(-1.549e-12) + (2*(n)*(1.651e-9)) + (530.27*(-7.559e-7)) - (0.000425* 39417) ),0)
                                                                        dfdx0 = -1 * (dfdx00 + .08*dfdx01)
                                                                            dfdx1 = -1 * (dfdx10 + .08* dfdx11)
                                                                                return np.array()[dfdx0 dfdx1]

cons = ({
        ‘type’ : ‘ineq’,
        ‘fun’ : lambda x : np.array([(((46800)/5.5125)*((x1/.5)+(x2/2))*100)/(46800) - 80]),
        ‘jac’ : lambda x : np.array([(46800*100)/(5.5125*.5*46800) , 1.0])},
        {
        ‘type’ : ‘ineq’,
        ‘fun’ : lambda x : re(x[0],x[1]) - 6]),
    ‘jac’ : lambda x : np.array([(func_derv1(x[0],x[1]))})
                                 
                                 
                                 res = minimize(fund, 2.0, args=(1.0,), jac = fuc_deric, constraints = cons, method=‘SLSQP’, options=(‘disp’: True))
                                 
                                 
                                 
                                 
